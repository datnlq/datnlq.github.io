<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>DatNLQ</title>
    <link>https://datnlq.github.io/</link>
    <description>Recent content on DatNLQ</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 06 Jan 2022 02:11:42 +0700</lastBuildDate><atom:link href="https://datnlq.github.io/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>[PortSwigger] - File upload vulnerabilities</title>
      <link>https://datnlq.github.io/posts/fileuploadvuln/</link>
      <pubDate>Thu, 06 Jan 2022 02:11:42 +0700</pubDate>
      
      <guid>https://datnlq.github.io/posts/fileuploadvuln/</guid>
      <description>File upload vulnerabilities What are file upload vulnerabilities? - Lỗ hổng tải lên file là gì? Lỗ hổng tải lên file là khi server web cho phép user tải file lên hệ thống file của nó mà không xác nhận đầy đủ những thứ như tên, loại, nội dung hoặc kích thước của chúng. Không thực thi đúng các hạn chế đối với những điều này có thể có nghĩa là ngay cả một chức năng tải lên hình ảnh cơ bản cũng có thể được sử dụng để tải lên các file tùy ý và có khả năng nguy hiểm.</description>
    </item>
    
    <item>
      <title>[PortSwigger] - Websocket</title>
      <link>https://datnlq.github.io/posts/websocket/</link>
      <pubDate>Sun, 02 Jan 2022 15:07:26 +0700</pubDate>
      
      <guid>https://datnlq.github.io/posts/websocket/</guid>
      <description>WebSockets WebSocket là một giao thức giúp truyền dữ liệu giữa mô hình client-server qua 1 kết nối TCP duy nhất. Giao thức này sử dụng port 80 và 443 và nó là 1 phần của HTML5. Vì vậy nên giao thức websocket có thể hoạt động trên các cổng web tiêu chuẩn.
Không giống với giao thức HTTP là cần client chủ động gửi yêu cầu cho server, client sẽ chời đợi để nhận được dữ liệu từ server.</description>
    </item>
    
    <item>
      <title>[Pwnable.tw] – Realloc</title>
      <link>https://datnlq.github.io/posts/realloc/</link>
      <pubDate>Fri, 31 Dec 2021 03:11:38 +0700</pubDate>
      
      <guid>https://datnlq.github.io/posts/realloc/</guid>
      <description>[Pwnable.tw] – Realloc PIE bị vô hiệu hóa, điều này sẽ dễ dàng hơn cho việc leak địa chỉ.
allocate() Đọc index đầu tiên là loại long, và giá trị chỉ có thể là 0 hoặc 1, size phải &amp;lt; = 0x78, ở đây realloc tương đương với maloc, sau đó đọc data và gán số không ở phần cuối input.
reallocate() Đánh số, kích thước, dữ liệu, &amp;hellip; phân bổ lại một chuck bộ nhớ.</description>
    </item>
    
    <item>
      <title>[Pwnable.tw] – Applestore</title>
      <link>https://datnlq.github.io/posts/applestore/</link>
      <pubDate>Tue, 28 Dec 2021 19:39:48 +0700</pubDate>
      
      <guid>https://datnlq.github.io/posts/applestore/</guid>
      <description>[Pwnable.tw] – Applestore Chương trình là 1 cửa hàng bán điện thoại iphone.
main() menu() handler() list() Liệt kê các mặt hàng trong chương trình.
add() Thêm 1 sản phẩm vào giỏ hàng. Các sản phẩm trong giỏ hàng được lưu trên heap dưới dạng 1 double linked list, mỗi node có kiểu là struct PRODUCT. Trong đó: PRODUCT.fd là con trỏ trỏ đến node tiếp theo trong list, PRODUCT.bk là con trỏ trỏ đến node phía trước.</description>
    </item>
    
    <item>
      <title>[Pwnable.tw] – Silver Bullet</title>
      <link>https://datnlq.github.io/posts/silverbullet/</link>
      <pubDate>Fri, 24 Dec 2021 13:51:36 +0700</pubDate>
      
      <guid>https://datnlq.github.io/posts/silverbullet/</guid>
      <description>[Pwnable.tw] – Silver Bullet main() create_bullet() Tạo một viên đạn BULLET *bullet có tên là bullet.desc dài tối đa 0x30 kí tự do người dùng nhập vào, set power của bullet là bullet.power = len(bullet.desc).
power_up() Ta có thể tăng sức mạnh cho bullet bằng cách nối dài thêm desc, bullet.power sẽ được cập nhật lại là chiều dài của tên mới. Chiều dài tối đa của bullet.desc vẫn là 0x30</description>
    </item>
    
    <item>
      <title>[Pwnable.tw] – Hacknote</title>
      <link>https://datnlq.github.io/posts/hacknote/</link>
      <pubDate>Fri, 24 Dec 2021 03:46:08 +0700</pubDate>
      
      <guid>https://datnlq.github.io/posts/hacknote/</guid>
      <description>[Pwnable.tw] – hacknote Check file và checksec ta thấy được vài điều sau:
+ File binary đã bị strip và là file 32 bit + Canary được bật và ngăn không có thực thi shellcode trên stack  =&amp;gt; Chúng ta có thể dùng IDA phân tích và sử dụng address bên IDA để đặt breakpoint cho gdb khi debug.
Sử dụng IDA xem code C t thấy được có 4 hàm chính tương tự như 4 option khi chạy thử chương trình, tuy nhiên thì tên hàm không được đặt đúng mà có cấu trúc là sub_##### nên chúng ta phải dựa vào flow của từng hàm để nhận biết các hàm.</description>
    </item>
    
    <item>
      <title>[Pwnable.tw] – Dubblesort</title>
      <link>https://datnlq.github.io/posts/dubblesort/</link>
      <pubDate>Thu, 09 Dec 2021 14:57:14 +0700</pubDate>
      
      <guid>https://datnlq.github.io/posts/dubblesort/</guid>
      <description>[Pwnable.tw] – Dubblesort Tiếp theo chúng ta sẽ làm 1 bài sử dụng kỹ thuật ret2libc :3
Kiểm tra các cơ chế bảo vệ và các thông tin cơ bản của file
Sau đó dùng IDA để phân tích file binary và code C:
Chạy test thử chương trình như hình dưới thì vô tình thấy được 1 vài ký tự lạ xuất hiện sau chuỗi được in ra.
==&amp;gt; Đây là 1 lỗi có thể khai thác</description>
    </item>
    
    <item>
      <title>[Pwnable.tw] – 3×17</title>
      <link>https://datnlq.github.io/posts/3x17/</link>
      <pubDate>Thu, 09 Dec 2021 08:43:30 +0700</pubDate>
      
      <guid>https://datnlq.github.io/posts/3x17/</guid>
      <description>[Pwnable.tw] – 3×17 Chào các bạn nay chúng ta sẽ đến với bài tiếp theo của pwnable là bài 3x17.
Đầu tiên chúng ta sẽ kiểm tra các thông tin cơ bản về thông tin file và các cơ chế bảo mật như sau :
Chạy thử chương trình vào sau đó dùng IDA để có thể reverse lại code C (nếu có thể ):
Sau khi dùng IDA lần theo flow string của file binary thì mình đã có thể tìm ra được hàm của chúng ta như sau :</description>
    </item>
    
    <item>
      <title>[LTAT] Overflow-based Exploitation</title>
      <link>https://datnlq.github.io/posts/bof/</link>
      <pubDate>Mon, 22 Nov 2021 01:09:05 +0700</pubDate>
      
      <guid>https://datnlq.github.io/posts/bof/</guid>
      <description>NT521 : Overflow-based Exploitation Helu mọi người, nhân tiện mình bị 1 đống bài pwn trên lớp dí nên mình viết luôn cái blog này cho vui :3 Nếu có gì sai sót thì thầy với các bạn đừng có dí em
ELF x86 - Format string bug basic 1 #include &amp;lt;stdio.h&amp;gt; #include &amp;lt;unistd.h&amp;gt; int main(int argc, char *argv[]){ FILE *secret = fopen(&amp;#34;/challenge/app-systeme/ch5/.passwd&amp;#34;, &amp;#34;rt&amp;#34;); char buffer[32]; fgets(buffer, sizeof(buffer), secret); printf(argv[1]); fclose(secret); return 0; } Đầy là code của bài đầu tiên, như chúng ta có thể đọc hiểu được code C trên là: + Flag từ server sẽ được đọc vào secret pointer, sau đó ghi vào biến buf + In giá trị của biến argv[1] ra màn hình ==&amp;gt; từ đó chúng ta có thể suy ra rằng có thể dùng lệnh printf tận dùng lỗi fmt ở printf và in ra flag :3</description>
    </item>
    
    <item>
      <title>[PortSwigger] Access Control</title>
      <link>https://datnlq.github.io/posts/accesscontrol/</link>
      <pubDate>Sun, 07 Nov 2021 04:03:51 +0700</pubDate>
      
      <guid>https://datnlq.github.io/posts/accesscontrol/</guid>
      <description>Access Control Vulnerabilities Chào mọi người ~ Mình đã dừng việc traning trên portswigger 1 thời gian khá dài, maybe do mình chơi đồ (án) nhiều quá :3 Nhưng dù sao mình không nên bỏ bê chứng chỉ web này được :D. Hôm nay chúng ta sẽ mô tả về lỗ hổng kiểm soát truy cập(Access control) và leo thang đặc quyền (Privilege escalation) nhé! Để có thể khai thác được bất kỳ lỗ hổng nào thì chúng ta đều phải biết nó là lỗ hổng gì trước nên chúng ta sẽ tìm hiểu qua khái niệm của 2 lỗ hổng này trước</description>
    </item>
    
    <item>
      <title>Learn PWN - Practice:  First step </title>
      <link>https://datnlq.github.io/posts/protostar/</link>
      <pubDate>Fri, 22 Oct 2021 21:43:05 +0700</pubDate>
      
      <guid>https://datnlq.github.io/posts/protostar/</guid>
      <description>How did I come into contact with pwn ? In random day in random year ago, i feel like it&amp;rsquo;s fun to pwn, so &amp;hellip;. i tried it like this.
PROTOSTAR EXPLOIT EXERCISE Stack 0 Hãy cùng mở đầu với stackz3r0 nào các bạn ! Đề bài đã cung cấp cho chúng ta code C nên mọi thứ sẽ dễ hình dung hơn là mã ASM tuy nhiên chúng ta sẽ phân tích cả 2 nhé!</description>
    </item>
    
    <item>
      <title>XML external entity injection - XXE</title>
      <link>https://datnlq.github.io/posts/xxe/</link>
      <pubDate>Tue, 28 Sep 2021 23:43:19 +0700</pubDate>
      
      <guid>https://datnlq.github.io/posts/xxe/</guid>
      <description>XML external entity injection (XXE) What is XML enternal entity injection ? XML entermal entity injection hay còn được gọi là XXE injection là 1 lỗ hổng được đánh giá mức độ nghiêm trọng là 4/10 Web Application Secirity Risks của OWASP. XXE là một lỗ hổng bảo mật web cho phép hacker tấn công can thiệp vào quá trình xử lí dữ liệu XML của application.
Về XXE thì sẽ có 2 phần định nghĩa như sau :</description>
    </item>
    
    <item>
      <title>Server-side request forgery - SSRF</title>
      <link>https://datnlq.github.io/posts/ssrf/</link>
      <pubDate>Tue, 28 Sep 2021 23:41:26 +0700</pubDate>
      
      <guid>https://datnlq.github.io/posts/ssrf/</guid>
      <description>Server-side request forgery (SSRF) What is Server-side request forgery ? SSRF là 1 lỗ hổng bảo mật web cho phéo kẻ tấn công điều khiển ứng dụng phía máy chủ thực hiện các yêu cầu HTTP đến 1 tên miền tùy ý của hacker.
Trong 1 cuộc tấn công SSRF điển hình thì hacker có thể kiến server tạo kết nối với các dịch vụ chỉ dành cho nội bộ trong cở sở hạ tầng của tổ chức.</description>
    </item>
    
    <item>
      <title>SQL injection vulnerability</title>
      <link>https://datnlq.github.io/posts/sqlinjection/</link>
      <pubDate>Tue, 28 Sep 2021 23:40:25 +0700</pubDate>
      
      <guid>https://datnlq.github.io/posts/sqlinjection/</guid>
      <description>PortSwigger Web Security Academy Labs SQL Injection [SQL injection vulnerability in WHERE clause allowing retrieval of hidden data] Đề bài yêu cầu chúng ta khai thác lỗ thông trong phần filter danh mục sản phẩm, và đã cho sẳn chúng ta câu truy vấn sql như sau:
SELECT * FROM products WHERE category = &amp;#39;Gifts&amp;#39; AND released = 1 Khi truy cập vào bài lab, thì chúng ta thấy 1 trang web bán hàng gồm nhiều sản phẩm, theo như đề bài chúng ta filter bằng những từ khóa có sẳn dùng Burp Suite để bắt lấy request như sau:</description>
    </item>
    
    <item>
      <title>HTTP Request Smuggling - HRS</title>
      <link>https://datnlq.github.io/posts/hrs/</link>
      <pubDate>Tue, 28 Sep 2021 23:39:35 +0700</pubDate>
      
      <guid>https://datnlq.github.io/posts/hrs/</guid>
      <description>HTTP Request Smuggling What is HTTP Request Smuggling ? HTTP request smuggling (HRS) là 1 kỹ thuật tấn công nhằm vào các HTTP server(web server, proxy server). Bất cứ khi nào 1 HTTP requset của client được phân tích bởi nhiều hơn 1 hệ thống thì đều có khả năng bị HRS. HRS thường rất nghiêm trọng, cho phép kẻ tấn công vượt qua các kiểm soát bảo mật, truy cập trái phép vào dữ liệu nhảy cảm và xâm phạm vào ứng dụng.</description>
    </item>
    
    <item>
      <title>DOM-based vulnerabilities</title>
      <link>https://datnlq.github.io/posts/dombased/</link>
      <pubDate>Tue, 28 Sep 2021 23:38:38 +0700</pubDate>
      
      <guid>https://datnlq.github.io/posts/dombased/</guid>
      <description>DOM-based vulnerabilities What is DOM-based vulnerabilities ? DOM viết tắt của Document Object Model là 1 dạng chuẩn của W3C đưa ra nhằm để truy xuất và thao tác dữ liệu của tài liệu có cấu trúc như HTML, XML. Mô hình này thể hiện tài liệu dưới dạng cấu trúc cây phân cấp. Tất cả các thành phần trong HTML, XML đều được xem như một node. DOM Based XSS là kỹ thuật khai thác XSS dựa trên việc thay đổi cấu trúc DOM của tài liệu, cụ thể là HTML.</description>
    </item>
    
    <item>
      <title>Cross-site Request Forgery - CSRF</title>
      <link>https://datnlq.github.io/posts/csrf/</link>
      <pubDate>Tue, 28 Sep 2021 23:36:11 +0700</pubDate>
      
      <guid>https://datnlq.github.io/posts/csrf/</guid>
      <description>Cross-site Request Forgery What is Cros-site Request Forgery ? Also known as CSRF CSRF là một lỗ hổng web cho phép kẻ tấn công thực hiện các hành vi dựa trên người dùng, mà người dùng không nhận thức được các hành vi đó. Đây là một kỹ thuật mượn quyền trái phép.
How to exploit CSRF ? Example Để có thể thực hiện được cuộc tấn công CSRF, cần có ba điều kiện chính:</description>
    </item>
    
    <item>
      <title>Cross-origin resource sharing - CORS</title>
      <link>https://datnlq.github.io/posts/cors/</link>
      <pubDate>Tue, 28 Sep 2021 23:34:34 +0700</pubDate>
      
      <guid>https://datnlq.github.io/posts/cors/</guid>
      <description>Cross-origin resource sharing (CORS) là gì ? What is CORS ? Tên đầy đủ là Cross-Origin Resource Sharing. Hiểu sâu hơn đó chính là chia sẻ tài nguyên có nhiều nguồn gốc khác nhau. Chính sách nguồn gốc giống nhau của trình duyệt là một cơ chế bảo mật quan trọng. Khách hàng từ các nguồn khác nhau không thể truy cập tài nguyên của nhau nếu không được phép. Định nghĩa của tương đồng là protocol,domain và port của liên kết truy cập là giống nhau.</description>
    </item>
    
    <item>
      <title>Clickjacking</title>
      <link>https://datnlq.github.io/posts/clickjacking/</link>
      <pubDate>Tue, 28 Sep 2021 23:25:50 +0700</pubDate>
      
      <guid>https://datnlq.github.io/posts/clickjacking/</guid>
      <description>Clickjacking Nhân dịp trên mạng đang nổi trội những người thân bạn bè pay acc fb ngay trong 1 đêm thì mình có cảm hứng để làm về lổ hỗng Clickjacking
Clickjacking là gì ? Nói ngắn gọn dễ hiểu nhất là một hình thức tấn công đánh lừa người dùng nhấp chuột vô ý vào một đối tượng trên website(ví dụ cụ thể ở đây là fb). Khi nhấp chuột vào một đối tượng trên màn hình, người dùng nghĩ là mình đang click vào đối tượng đó nhưng thực chất họ đang bị lừa click vào một đối tượng khác &amp;gt; đã bị làm mờ hay ẩn đi.</description>
    </item>
    
    <item>
      <title>[CTF] - DUCTF</title>
      <link>https://datnlq.github.io/posts/ductf/</link>
      <pubDate>Tue, 28 Sep 2021 22:03:55 +0700</pubDate>
      
      <guid>https://datnlq.github.io/posts/ductf/</guid>
      <description>DUCTF WriteUp Pwn (4/9) deadcode First things, we have to check file and checksec cmd to make something clearly.
We can see it a ELF 64bits file, no canary found, no pie,NX enabled (Non-eXecutable). It mean we can use IDA Pro 64bits to read and no canary,no pie, can&amp;rsquo;t execute in stack :D .
After that, i using IDA Pro 64 bits to read ELF file and can be get source code C like this.</description>
    </item>
    
  </channel>
</rss>
